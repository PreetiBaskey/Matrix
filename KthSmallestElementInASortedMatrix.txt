// 1st approach | Brute force approach
// Time complexity :- O(N2logN)
// Space complexity :- O(N2)

#include<bits/stdc++.h>
using namespace std;

int findElement(vector<vector<int>> &mat, int k) {
    int n = mat.size();
    vector<int> newArr;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            newArr.push_back(mat[i][j]);
        }
    }
    sort(newArr.begin(), newArr.end());
    
    return newArr[k - 1];
}

int main() {
    
    int n;
    cout<<"Enter the value of n :- ";
    cin>>n;
    vector<vector<int>> mat(n, vector<int>(n));
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i<<"th row :- ";
        for(int j = 0; j < n; j++) {
            cin>>mat[i][j];
        }
    }
    cout<<"2D matrix is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }
    int k;
    cout<<"Enter value of k :- ";
    cin>>k;
    int result = findElement(mat, k);
    cout<<k<<"th element is :- "<<result;
    
    return 0;
}



// 2nd approach
// Time complexity :- O(N2logN)
// Space complexity :- O(N2)



#include<bits/stdc++.h>
using namespace std;

int findElement(vector<vector<int>> &mat, int k) {
    int n = mat.size();
    priority_queue<int, vector<int>, greater<int>> pq;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            pq.push(mat[i][j]);
        }
    }
    int i = 0;
    while(i != k - 1) {
        i++;
        pq.pop();
    }
    
    return pq.top();
}

int main() {
    
    int n;
    cout<<"Enter the value of n :- ";
    cin>>n;
    vector<vector<int>> mat(n, vector<int>(n));
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i<<"th row :- ";
        for(int j = 0; j < n; j++) {
            cin>>mat[i][j];
        }
    }
    cout<<"2D matrix is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }
    int k;
    cout<<"Enter value of k :- ";
    cin>>k;
    int result = findElement(mat, k);
    cout<<k<<"th element is :- "<<result;
    
    return 0;
}
