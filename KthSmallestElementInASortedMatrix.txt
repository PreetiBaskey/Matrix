// 1st approach | Brute force approach
// Time complexity :- O(N2logN)
// Space complexity :- O(N2)

#include<bits/stdc++.h>
using namespace std;

int findElement(vector<vector<int>> &mat, int k) {
    int n = mat.size();
    vector<int> newArr;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            newArr.push_back(mat[i][j]);
        }
    }
    sort(newArr.begin(), newArr.end());
    
    return newArr[k - 1];
}

int main() {
    
    int n;
    cout<<"Enter the value of n :- ";
    cin>>n;
    vector<vector<int>> mat(n, vector<int>(n));
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i<<"th row :- ";
        for(int j = 0; j < n; j++) {
            cin>>mat[i][j];
        }
    }
    cout<<"2D matrix is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }
    int k;
    cout<<"Enter value of k :- ";
    cin>>k;
    int result = findElement(mat, k);
    cout<<k<<"th element is :- "<<result;
    
    return 0;
}



// 2nd approach | using min heap
// Time complexity :- O(N2logN)
// Space complexity :- O(N2)


#include<bits/stdc++.h>
using namespace std;

int findElement(vector<vector<int>> &mat, int k) {
    int n = mat.size();
    priority_queue<int, vector<int>, greater<int>> pq;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            pq.push(mat[i][j]);
        }
    }
    int i = 0;
    while(i != k - 1) {
        i++;
        pq.pop();
    }
    
    return pq.top();
}

int main() {
    
    int n;
    cout<<"Enter the value of n :- ";
    cin>>n;
    vector<vector<int>> mat(n, vector<int>(n));
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i<<"th row :- ";
        for(int j = 0; j < n; j++) {
            cin>>mat[i][j];
        }
    }
    cout<<"2D matrix is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }
    int k;
    cout<<"Enter value of k :- ";
    cin>>k;
    int result = findElement(mat, k);
    cout<<k<<"th element is :- "<<result;
    
    return 0;
}


// 3rd approach | using max heap
// Time complexity :- O(N2logk)
// Space complexity :- O(k)

#include<bits/stdc++.h>
using namespace std;

int findElement(vector<vector<int>> &mat, int k) {
    int n = mat.size();
    priority_queue<int> pq;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            pq.push(mat[i][j]);
            if(pq.size() > k) {
                pq.pop();
            }
        }
    }
    
    return pq.top();
}

int main() {
    
    int n;
    cout<<"Enter the value of n :- ";
    cin>>n;
    vector<vector<int>> mat(n, vector<int>(n));
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i<<"th row :- ";
        for(int j = 0; j < n; j++) {
            cin>>mat[i][j];
        }
    }
    cout<<"2D matrix is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }
    int k;
    cout<<"Enter value of k :- ";
    cin>>k;
    int result = findElement(mat, k);
    cout<<k<<"th element is :- "<<result;
    
    return 0;
}


// 4th approach | optimized approach | using binary search
// Time complexity :- O(Nlog(maxâˆ’min)logN)
// Space complexity :- O(1)


#include<vector>
#include<iostream>
using namespace std;

int findKthElement(vector<vector<int>> &mat, int k) {
    int n = mat.size();
    int low = mat[0][0];
    int high = mat[n - 1][n - 1];
    if(k == n * n) {
        return high;
    }
    while(low < high) {
        int mid = low + (high - low) / 2;
        int small = 0;
        for(int i = 0; i < n; i++) {
            small += lower_bound(mat[i].begin(), mat[i].end(), mid) - mat[i].begin();
        }
        if(small < k) {
            low = mid + 1;
        }
        else if(small >= k) {
            high = mid;
        }
    }
    
    return low - 1;
}

int main() {
    
    int n;
    cout<<"Enter the value of n :- ";
    cin>>n;
    vector<vector<int>> mat(n, vector<int>(n));
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i<<"th row :- ";
        for(int j = 0; j < n; j++) {
            cin>>mat[i][j];
        }
    }
    cout<<"2D array is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }
    
    int k;
    cout<<"Enter k :- ";
    cin>>k;
    int result = findKthElement(mat, k);
    cout<<k<<"th smallest elements is :- "<<result;
    
    return 0;
}
