// Brute force approach
// Time complexity :- O(N4)
// Spaxe complexity :- O(1)

#include<bits/stdc++.h>
using namespace std;

int getMaxDiff(vector<vector<int>> &mat) {
    int n = mat.size();
    int maxValue = INT_MIN;
    for(int a = 0; a < n - 1; a++) {
        for(int b = 0; b < n - 1; b++) {
            for(int c = a + 1; c < n; c++) {
                for(int d = b + 1; d < n; d++) {
                     maxValue = max(maxValue, mat[c][d] - mat[a][b]);
                }
            }
        }
    }
    
    return maxValue;
}

int main() {
    
    int n;
    cout<<"Enter n :- ";
    cin>>n;
    vector<vector<int>> mat(n, vector<int>(n));
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i<<"th row :- ";
        for(int j = 0; j < n; j++) {
            cin>>mat[i][j];
        }
    }
    cout<<"2D matrix is :- "<<endl;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }
    
    int maxDifference = getMaxDiff(mat);
    cout<<"Maximum different is :- "<<maxDifference;
    
    return 0;
}
