// Brute Force Approach

#include<bits/stdc++.h>
using namespace std;

bool getResult(vector<vector<int>> &mat, int &target) {
    int m = mat.size();
    int n = mat[0].size();
    
    int i = 0, j = n - 1;
    while(i < m && j >= 0) {
        if(mat[i][j] > target) {
            j--;
        }
        else if(mat[i][j] < target) {
            i++;
        }
        else {
            return true;
        }
    }
    
    return false;
}

int main() {
    
    int m, n;
    cout<<"Enter number of rows :- ";
    cin>>m;
    cout<<"Enter number of columns :- ";
    cin>>n;
    vector<vector<int>> mat(m, vector<int>(n));
    
    for(int i = 0; i < m; i++) {
        cout<<"Enter "<<i<<"th row :- ";
        for(int j = 0; j < n; j++) {
            cin>>mat[i][j];
        }
    }
    cout<<"2 D matrix is :- "<<endl;
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }
    
    int target;
    cout<<"Enter target :- ";
    cin>>target;
    
    bool result = getResult(mat, target);
    if(result) {
        cout<<"Target found !!";
    }
    else {
        cout<<"Target  not found !!";
    }
    
    return 0;
}

// Optimized Approach
#include<bits/stdc++.h>
using namespace std;

bool getResult(vector<vector<int>> &mat, int &target) {
    int m = mat.size();
    int n = mat[0].size();
    
    int start = 0, end = m * n - 1;
    while(start <= end) {
        int mid = start + (end - start)/2;
        int row = mid/n;
        int col = mid%n;
        if(mat[row][col] > target) {
            end = mid - 1;
        }
        else if(mat[row][col] < target) {
            start = mid + 1;
        }
        else {
            return true;
        }
    }
    
    return false;
}

int main() {
    
    int m, n;
    cout<<"Enter number of rows :- ";
    cin>>m;
    cout<<"Enter number of columns :- ";
    cin>>n;
    vector<vector<int>> mat(m, vector<int>(n));
    
    for(int i = 0; i < m; i++) {
        cout<<"Enter "<<i<<"th row :- ";
        for(int j = 0; j < n; j++) {
            cin>>mat[i][j];
        }
    }
    cout<<"2 D matrix is :- "<<endl;
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }
    
    int target;
    cout<<"Enter target :- ";
    cin>>target;
    
    bool result = getResult(mat, target);
    if(result) {
        cout<<"Target found !!";
    }
    else {
        cout<<"Target  not found !!";
    }
    
    return 0;
}
